// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: teraterapb/v1/teratera.proto

package teraterapbconnect

import (
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"

	connect "connectrpc.com/connect"
	v1 "github.com/minguu42/sandbox/teratera/gen/teraterapb/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// TerateraServiceName is the fully-qualified name of the TerateraService service.
	TerateraServiceName = "teraterapb.v1.TerateraService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TerateraServiceCheckHealthProcedure is the fully-qualified name of the TerateraService's
	// CheckHealth RPC.
	TerateraServiceCheckHealthProcedure = "/teraterapb.v1.TerateraService/CheckHealth"
)

// TerateraServiceClient is a client for the teraterapb.v1.TerateraService service.
type TerateraServiceClient interface {
	CheckHealth(context.Context, *connect.Request[v1.CheckHealthRequest]) (*connect.Response[v1.CheckHealthResponse], error)
}

// NewTerateraServiceClient constructs a client for the teraterapb.v1.TerateraService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTerateraServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TerateraServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &terateraServiceClient{
		checkHealth: connect.NewClient[v1.CheckHealthRequest, v1.CheckHealthResponse](
			httpClient,
			baseURL+TerateraServiceCheckHealthProcedure,
			opts...,
		),
	}
}

// terateraServiceClient implements TerateraServiceClient.
type terateraServiceClient struct {
	checkHealth *connect.Client[v1.CheckHealthRequest, v1.CheckHealthResponse]
}

// CheckHealth calls teraterapb.v1.TerateraService.CheckHealth.
func (c *terateraServiceClient) CheckHealth(ctx context.Context, req *connect.Request[v1.CheckHealthRequest]) (*connect.Response[v1.CheckHealthResponse], error) {
	return c.checkHealth.CallUnary(ctx, req)
}

// TerateraServiceHandler is an implementation of the teraterapb.v1.TerateraService service.
type TerateraServiceHandler interface {
	CheckHealth(context.Context, *connect.Request[v1.CheckHealthRequest]) (*connect.Response[v1.CheckHealthResponse], error)
}

// NewTerateraServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTerateraServiceHandler(svc TerateraServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	terateraServiceCheckHealthHandler := connect.NewUnaryHandler(
		TerateraServiceCheckHealthProcedure,
		svc.CheckHealth,
		opts...,
	)
	return "/teraterapb.v1.TerateraService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TerateraServiceCheckHealthProcedure:
			terateraServiceCheckHealthHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTerateraServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTerateraServiceHandler struct{}

func (UnimplementedTerateraServiceHandler) CheckHealth(context.Context, *connect.Request[v1.CheckHealthRequest]) (*connect.Response[v1.CheckHealthResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("teraterapb.v1.TerateraService.CheckHealth is not implemented"))
}
